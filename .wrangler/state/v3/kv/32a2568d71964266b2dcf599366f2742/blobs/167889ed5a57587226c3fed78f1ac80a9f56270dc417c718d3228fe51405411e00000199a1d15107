{"sessionId":"1528bb06-7da9-4c52-923a-ab2f1b49fc18","topic":"Python","difficulty":"hard","questions":[{"id":1,"question":"What is the purpose of the `__slots__` attribute in Python classes?","options":["To enable dynamic method creation","To create a singleton class","To optimize memory usage by reducing the number of instance variables","To enable garbage collection"],"correctAnswer":2,"explanation":"The `__slots__` attribute is used to optimize memory usage by reducing the number of instance variables. When `__slots__` is defined, Python does not create a dictionary to store instance variables, which can save memory for classes with many instance variables."},{"id":2,"question":"What is the difference between `yield` and `return` in Python generators?","options":["Yield returns the result of the expression, while return returns the value of the expression","Yield creates a new generator, while return returns the value of the expression","Yield suspends the execution of the generator, while return terminates the generator","Yield is used for recursive functions, while return is used for iterative functions"],"correctAnswer":2,"explanation":"The `yield` keyword is used to suspend the execution of a generator, allowing it to remember its state and resume execution when called again. The `return` keyword, on the other hand, terminates the generator and returns the value of the expression."},{"id":3,"question":"What is the purpose of the `metaclass` attribute in Python classes?","options":["To create a class that can be instantiated","To create a class that can be subclassed","To create a class that can modify its own behavior at runtime","To create a class that can modify the behavior of its subclasses"],"correctAnswer":3,"explanation":"A metaclass is a class whose instances are classes. Metaclasses are used to create classes that can modify their own behavior at runtime, such as by adding or removing methods."},{"id":4,"question":"What is the difference between `__init__` and `__new__` in Python classes?","options":["__init__ is called after the object is created, while __new__ is called before the object is created","__init__ is used to initialize the object, while __new__ is used to create the object","__init__ is used to create a new object, while __new__ is used to initialize an existing object","__init__ is used to modify the behavior of the object, while __new__ is used to modify the behavior of the class"],"correctAnswer":1,"explanation":"The `__init__` method is used to initialize an object after it has been created, while the `__new__` method is used to create a new object. The `__new__` method is called before the `__init__` method."},{"id":5,"question":"What is the purpose of the `contextmanager` decorator in Python?","options":["To create a context manager that can be used with the `with` statement","To create a decorator that can be used to modify the behavior of a function","To create a decorator that can be used to modify the behavior of a class","To create a decorator that can be used to modify the behavior of a module"],"correctAnswer":0,"explanation":"The `contextmanager` decorator is used to create a context manager that can be used with the `with` statement. A context manager is an object that can be used to manage resources, such as files or database connections."}],"totalQuestions":5,"currentQuestionIndex":5,"answers":[{"questionId":1,"question":"What is the purpose of the `__slots__` attribute in Python classes?","userAnswer":2,"correctAnswer":2,"isCorrect":true,"explanation":"The `__slots__` attribute is used to optimize memory usage by reducing the number of instance variables. When `__slots__` is defined, Python does not create a dictionary to store instance variables, which can save memory for classes with many instance variables.","timestamp":1759356413912},{"questionId":2,"question":"What is the difference between `yield` and `return` in Python generators?","userAnswer":2,"correctAnswer":2,"isCorrect":true,"explanation":"The `yield` keyword is used to suspend the execution of a generator, allowing it to remember its state and resume execution when called again. The `return` keyword, on the other hand, terminates the generator and returns the value of the expression.","timestamp":1759356425095},{"questionId":3,"question":"What is the purpose of the `metaclass` attribute in Python classes?","userAnswer":2,"correctAnswer":3,"isCorrect":false,"explanation":"A metaclass is a class whose instances are classes. Metaclasses are used to create classes that can modify their own behavior at runtime, such as by adding or removing methods.","timestamp":1759356432830},{"questionId":4,"question":"What is the difference between `__init__` and `__new__` in Python classes?","userAnswer":1,"correctAnswer":1,"isCorrect":true,"explanation":"The `__init__` method is used to initialize an object after it has been created, while the `__new__` method is used to create a new object. The `__new__` method is called before the `__init__` method.","timestamp":1759356463207},{"questionId":5,"question":"What is the purpose of the `contextmanager` decorator in Python?","userAnswer":1,"correctAnswer":0,"isCorrect":false,"explanation":"The `contextmanager` decorator is used to create a context manager that can be used with the `with` statement. A context manager is an object that can be used to manage resources, such as files or database connections.","timestamp":1759356471592}],"score":3,"completed":true,"startTime":1759356406395,"endTime":1759356473606}